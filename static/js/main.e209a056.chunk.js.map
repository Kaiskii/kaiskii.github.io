{"version":3,"sources":["linkedin.svg","twitter.svg","wordpress.svg","KaiskiiLogo.svg","Navbar.tsx","Loading.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","className","href","target","rel","src","tw","alt","li","wp","Loading","loadingBlocks","y","x","ran","Math","random","console","log","s","animationDelay","opc","push","style","KaiskiiLogo","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,sC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,2NCyB5BC,G,MAlBA,WACb,OACE,yBAAKC,UAAU,UACX,uBAAGC,KAAK,+BAA+BC,OAAO,SAASC,IAAI,sBAAsBH,UAAU,cACzF,yBAAKI,IAAKC,IAAIC,IAAI,aAGpB,uBAAGL,KAAK,uCAAuCC,OAAO,SAASC,IAAI,sBAAsBH,UAAU,cACjG,yBAAKI,IAAKG,IAAID,IAAI,eAGpB,uBAAGL,KAAK,qCAAqCC,OAAO,SAASC,IAAI,sBAAsBH,UAAU,cAC/F,yBAAKI,IAAKI,IAAIF,IAAI,kB,gBCabG,G,MA5BC,WAEd,IADA,IAAMC,EAAgB,GACdC,EAAI,EAAGA,EAAI,EAAGA,IACpB,IAAI,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IAAK,CAC1B,IAAMC,EAAsB,GAAhBC,KAAKC,SAEjB,GADAC,QAAQC,IAAIJ,KACRA,EAAM,GAAV,CAIA,IAAIK,EAAI,CAAC,MAAM,aAAN,OAA+B,GAAJN,EAAN,GAArB,eAAsD,GAAJD,EAAR,KAA1C,OAAiEQ,eAAe,GAAD,OAAKN,EAAL,MACpFO,EAAM,CAACD,eAAe,GAAD,OAAqB,GAAhBL,KAAKC,SAAV,KAA8B,YAAY,GAAZ,OAAgB,EAAAD,KAAKC,SAAqB,EAA1C,MACvDL,EAAcW,KACZ,yBAAKrB,UAAU,WAAWsB,MAAOF,GAC/B,yBAAKpB,UAAU,gBAAgBsB,MAAOJ,OAM9C,OACE,yBAAKlB,UAAU,UACZU,EACD,yBAAKN,IAAKmB,IAAavB,UAAU,eAAeM,IAAI,eCftCkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.e209a056.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin.9c9759b9.svg\";","module.exports = __webpack_public_path__ + \"static/media/twitter.10bb74b1.svg\";","module.exports = __webpack_public_path__ + \"static/media/wordpress.0d289b28.svg\";","module.exports = __webpack_public_path__ + \"static/media/KaiskiiLogo.a9d494cf.svg\";","import React from 'react';\r\nimport li from './linkedin.svg';\r\nimport tw from './twitter.svg';\r\nimport wp from './wordpress.svg';\r\nimport './Navbar.css';\r\n\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className='Navbar'>\r\n        <a href='https://twitter.com/_Kaiskii' target='_blank' rel='noopener noreferrer' className='Navbar-Btn'>\r\n          <img src={tw} alt='twitter'/>\r\n        </a>\r\n\r\n        <a href='https://www.linkedin.com/in/kaiskii/' target='_blank' rel='noopener noreferrer' className='Navbar-Btn'>\r\n          <img src={li} alt='linked-in'/>\r\n        </a>\r\n\r\n        <a href='https://kappakaidev.wordpress.com/' target='_blank' rel='noopener noreferrer' className='Navbar-Btn'>\r\n          <img src={wp} alt='wordpress'/>\r\n        </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport KaiskiiLogo from './KaiskiiLogo.svg'\nimport './Loading.css';\n\nconst Loading = () => {\n  const loadingBlocks = [];\n  for(let y = 0; y < 9; y++) {\n    for(let x = 0; x < 12; x++) {\n      const ran = Math.random() * 18.0;\n      console.log(ran);\n      if (ran > 2) {\n        continue;\n      }\n      // animationDelay: `${((y * 10) + x)/10}s`\n      let s = {'--r': `translate(${-65 + (x * 10)}vw, ${-42.5 + (y * 10)}vh)`,  animationDelay: `${ran}s`} as React.CSSProperties;\n      let opc = {animationDelay: `${Math.random() * 10.0}s`, '--opc-ran': `${Math.random() * (4 - 3) + 3}s`} as React.CSSProperties;\n      loadingBlocks.push(\n        <div className='moreAnim' style={opc}>\n          <div className='LoadingSquare' style={s}/>\n        </div>\n      );\n    }\n  }\n\n  return(\n    <div className='square'>\n      {loadingBlocks}\n      <img src={KaiskiiLogo} className='Kaiskii-Logo' alt='kaiskii'/>\n    </div>\n  );\n}\n\nexport default Loading;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Navbar from './Navbar';\nimport Loading from './Loading';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Loading />\n    <Navbar />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}